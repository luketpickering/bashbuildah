#!/bin/bash

source ${BB_SCRIPT_DIR}/framework.funcs

function bb_mv_build_target {

    local FROM=$1
    local TO=$2
    if [ -z $FROM ]; then
      echo "Error: expected a FROM buildah container id."
      exit 1
    fi

    if [ -z $TO ]; then
      echo "Error: expected a TO buildah container id."
      exit 2
    fi

    shift; shift

    local PKG_NAME=$1
    local PKG_VERS=$(bb_resolve_vers ${PKG_NAME} ${2})
    local PKG_ROOT_IT=${BB_PKG_ROOT_IT}
    local PKG_ROOT_IMAGE
    local PKG_ROOT_TAG

    bb_sanitize_pkg_identifier $PKG_NAME $PKG_ROOT_IT $PKG_VERS $PKG_TAG

    if ! bb_check_dir_structure $PKG_NAME $PKG_ROOT_IT $PKG_VERS; then
      return 3
    fi

    if [ ! -e $BB_ROOT/$PKG_NAME/$PKG_VERS/$PKG_ROOT_IMAGE/$PKG_ROOT_TAG/injectin.to ]; then
        echo "Script \"$BB_ROOT/$PKG_NAME/$PKG_VERS/$PKG_ROOT_IMAGE/$PKG_ROOT_TAG/injectin.to\" doesn't exist."
        return 4
    fi

    if [ ! -x $BB_ROOT/$PKG_NAME/$PKG_VERS/$PKG_ROOT_IMAGE/$PKG_ROOT_TAG/injectin.to ]; then
        echo "Script \"$BB_ROOT/$PKG_NAME/$PKG_VERS/$PKG_ROOT_IMAGE/$PKG_ROOT_TAG/injectin.to\" isn't executable."
        return 5
    fi

    local BB_INJ_NAME=$PKG_NAME
    local BB_INJ_VERS=$PKG_VERS
    export BB_INJ_NAME
    export BB_INJ_VERS
    if ! $BB_ROOT/$PKG_NAME/$PKG_VERS/$PKG_ROOT_IMAGE/$PKG_ROOT_TAG/injectin.to $FROM $TO; then
      return 6
    fi
    export -n BB_INJ_NAME
    export -n BB_INJ_VERS

    return 0
}

function bb_inject {
  local TARG_NAME=$1
  local TARG_VERS=$(bb_resolve_vers ${TARG_NAME} ${2})
  local TO=$3

  local REPONAME=$(bb_get_image_FQName ${TARG_NAME} ${BB_PKG_ROOT_IT} ${TARG_VERS})

  local FROM=$(buildah from ${REPONAME})
  bb_mv_build_target ${FROM} ${TO} ${TARG_NAME} ${TARG_VERS}
  buildah rm ${FROM}
}

function bb_consume_target {
  local TARG_NAME=$1
  local TARG_VERS=$(bb_resolve_vers ${TARG_NAME} ${2})
  local FROM=$3
  local TO=$4

  bb_mv_build_target ${FROM} ${TO} ${TARG_NAME} ${TARG_VERS}
  buildah rm ${FROM}
}

function bb_cont_get_env {
    local CONT=$1
    local ENVNAME=$2

    # Have to check if it is empty or it will print an error
    if buildah run ${CONT} printenv ${ENVNAME} &> /dev/null; then
      buildah run ${CONT} printenv ${ENVNAME}
    fi
}

function bb_cont_set_env {
  local CONT=$1
  local ENVNAME=$2
  local ENVVALUE=$3

  if [[ $ENVNAME =~ "=" ]]; then
    echo "Environment variable name (${ENVNAME}) passed to bb_cont_set_env contained an equals character, this is an invalid name. (Maybe you used bb_cont_set_env \${CONT} ENVNAME=ENVVAL? Should be bb_cont_set_env \${CONT} ENVNAME ENVVAL"
    return 1
  fi

  buildah config --env ${ENVNAME}=${ENVVALUE} ${CONT}
}

function bb_copy_env {
  local FROM=$1
  local TO=$2
  local ENVNAME=$3

  if [[ $ENVNAME =~ "=" ]]; then
    echo "Environment variable name (${ENVNAME}) passed to bb_cont_set_env contained an equals character, this is an invalid name. (Maybe you used bb_cont_set_env \${CONT} ENVNAME=ENVVAL? Should be bb_cont_set_env \${CONT} ENVNAME ENVVAL"
    return 1
  fi

  local ENVVALUE=$(bb_cont_get_env ${FROM} ${ENVNAME})
  bb_cont_set_env ${TO} ${ENVNAME} ${ENVVALUE}
}

function bb_add_to_path_env {
  local CONT=$1
  local ENVNAME=$2
  local ENVVALUE=$3

  if [[ $ENVNAME =~ "=" ]]; then
    echo "Environment variable name (${ENVNAME}) passed to bb_cont_set_env contained an equals character, this is an invalid name. (Maybe you used bb_cont_set_env \${CONT} ENVNAME=ENVVAL? Should be bb_cont_set_env \${CONT} ENVNAME ENVVAL"
    return 1
  fi

  CONTVAL=$(bb_cont_get_env ${CONT} ${ENVNAME})
  bb_cont_set_env ${CONT} ${ENVNAME} "${ENVVALUE}:${CONTVAL}"
}

function bb_cont_set_psone {
    local CONT=$1
    local STR=$2
    buildah run ${CONT} sed -i -e "\$a PS1=\"\\\\[\\\\033[01;31m\\\\]${STR}\\\\[\\\\033[00m\\\\]:\\\\[\\\\033[01;34m\\\\]\\\\w\\\\[\\\\033[00m\\\\]# \"" /root/.bashrc
}

function bb_cont_to_cont_copy {
    local FROM=$1
    local TO=$2
    local SRC=$3
    local DEST=$4

cat << EOF > /tmp/$$.copy
#!/bin/bash
FROM_MP=\$(buildah mount ${FROM})
buildah copy ${TO} \$FROM_MP$SRC $DEST &> /dev/null
buildah unmount ${FROM} &> /dev/null
EOF

  chmod +x /tmp/$$.copy
  buildah unshare /tmp/$$.copy
  rm /tmp/$$.copy

}

function bb_cont_path_exists {
  local CONT=$1
  local CONT_PATH=$2

  buildah run ${CONT} bash -c "if [ -e $CONT_PATH ]; then echo 0; else echo 1; fi"
}

function bb_cont_mv {
  local CONT=$1
  shift
  local CMD="mv $@"
  buildah run ${CONT} bash -c "${CMD}"
}

function bb_cont_cp {
  local CONT=$1
  shift
  local CMD="cp $@"
  buildah run ${CONT} bash -c "${CMD}"
}

function bb_add_from_pkg_dir {
  local TO=$1
  local SRC=$2
  local DEST=$3

  if [ ! -e ${BB_PKG_DIR}/${SRC} ]; then
    echo "Requested buildah add ${TO} ${SRC} ${DEST} but cannot find: \"${BB_PKG_DIR}/${SRC}\""
    return 1
  fi
  buildah add ${TO} ${BB_PKG_DIR}/${SRC} ${DEST}
}

function bb_get_devbox {
  local BB_BUILD_TYPE=DEFAULT
  bb_get_image_FQName devbox ${1}
}

function bb_get_buildbox {
  local BB_BUILD_TYPE=DEFAULT
  bb_get_image_FQName buildbox ${1}
}

function bb_get_runbox {
  local BB_BUILD_TYPE=DEFAULT
  bb_get_image_FQName runbox ${1}
}

function bb_get_runbox_min {
  local BB_BUILD_TYPE=DEFAULT
  bb_get_image_FQName runbox_min ${1}
}

function bb_get_basebox {
  local BB_BUILD_TYPE=DEFAULT
  bb_get_image_FQName runbox_min ${1}
}

function bb_cont_mkdir {
  local CONT=${1}
  shift
  local LOCS="$@"

  buildah run ${CONT} mkdir -p ${LOCS}
}

function bb_cont_cd {
  local CONT=${1}
  local LOC=${2}

  buildah config --workingdir ${LOC} ${CONT}
}

function bb_cont_mkdir_cd {
  local CONT=${1}
  local LOC=${2}

  bb_cont_mkdir ${CONT} ${LOC}
  bb_cont_cd ${CONT} ${LOC}
}

function bb_commit {
  local CONT=${1}
  local IMAGE_FQNAME=${2}
  if [ -z ${IMAGE_FQNAME} ]; then
    IMAGE_FQNAME=${BB_PKG_IMAGE_FQNAME}
  fi
  buildah config --entrypoint "" ${CONT}
  bb_cont_set_env ${CONT} container_name ${BB_PKG_NAME}_${BB_PKG_VERS}
  bb_cont_set_psone ${CONT} ${BB_PKG_NAME}_${BB_PKG_VERS}
  local ID=$(buildah commit ${CONT} ${IMAGE_FQNAME})
  echo "[BB]: Committed ${CONT} -> ${IMAGE_FQNAME}"
  local RMID=$(buildah rm ${CONT})
  echo "[BB]: Removed ${CONT}"
}

function bb_from_devbox {
  echo $(buildah from $(bb_get_devbox ${BB_PKG_ROOT_IT}))
}
function bb_from_buildbox {
  echo $(buildah from $(bb_get_buildbox ${BB_PKG_ROOT_IT}))
}
function bb_from_runbox {
  echo $(buildah from $(bb_get_runbox ${BB_PKG_ROOT_IT}))
}
function bb_from_runbox_min {
  echo $(buildah from $(bb_get_runbox_min ${BB_PKG_ROOT_IT}))
}

function bb_from_base {
  local PKG_NAME=$1
  local PKG_VERS=$2
  local DEFAULT_IMAGE=$3
  local PKG_ROOT_IT=$BB_PKG_ROOT_IT

  local BASE_IMAGE_NAME=$(bb_get_base_image_name ${PKG_NAME} ${PKG_VERS})

  if [ -z ${BASE_IMAGE_NAME} ]; then
    echo $(buildah from $DEFAULT_IMAGE)
  else
    echo $(buildah from $BASE_IMAGE_NAME)
  fi
}

